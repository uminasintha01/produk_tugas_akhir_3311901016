{"version":3,"sources":["webpack:///node_modules/@capacitor/network/dist/esm/web.js"],"names":["translatedConnection","connection","window","navigator","mozConnection","webkitConnection","result","type","effectiveType","NetworkWeb","handleOnline","connectionType","status","connected","notifyListeners","handleOffline","addEventListener","unavailable","onLine","Network"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AACA,aAASA,oBAAT,GAAgC;AAC5B,UAAMC,UAAU,GAAGC,MAAM,CAACC,SAAP,CAAiBF,UAAjB,IACfC,MAAM,CAACC,SAAP,CAAiBC,aADF,IAEfF,MAAM,CAACC,SAAP,CAAiBE,gBAFrB;AAGA,UAAIC,MAAM,GAAG,SAAb;AACA,UAAMC,IAAI,GAAGN,UAAU,GAAGA,UAAU,CAACM,IAAX,IAAmBN,UAAU,CAACO,aAAjC,GAAiD,IAAxE;;AACA,UAAID,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAClC,gBAAQA,IAAR;AACI;AACA,eAAK,WAAL;AACA,eAAK,UAAL;AACID,kBAAM,GAAG,UAAT;AACA;;AACJ,eAAK,MAAL;AACIA,kBAAM,GAAG,MAAT;AACA;;AACJ,eAAK,UAAL;AACA,eAAK,MAAL;AACA,eAAK,OAAL;AACIA,kBAAM,GAAG,MAAT;AACA;;AACJ,eAAK,OAAL;AACA,eAAK,SAAL;AACIA,kBAAM,GAAG,SAAT;AACA;AACJ;;AACA,eAAK,SAAL;AACA,eAAK,IAAL;AACA,eAAK,IAAL;AACIA,kBAAM,GAAG,UAAT;AACA;;AACJ,eAAK,IAAL;AACIA,kBAAM,GAAG,MAAT;AACA;;AACJ;AACI;AA5BR;AA8BH;;AACD,aAAOA,MAAP;AACH;;QACYG,U;;;;;AACT,4BAAc;AAAA;;AAAA;;AACV;;AACA,cAAKC,YAAL,GAAoB,YAAM;AACtB,cAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,cAAMY,MAAM,GAAG;AACXC,qBAAS,EAAE,IADA;AAEXF,0BAAc,EAAEA;AAFL,WAAf;;AAIA,gBAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AACH,SAPD;;AAQA,cAAKG,aAAL,GAAqB,YAAM;AACvB,cAAMH,MAAM,GAAG;AACXC,qBAAS,EAAE,KADA;AAEXF,0BAAc,EAAE;AAFL,WAAf;;AAIA,gBAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AACH,SAND;;AAOA,YAAI,OAAOV,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,gBAAM,CAACc,gBAAP,CAAwB,QAAxB,EAAkC,MAAKN,YAAvC;AACAR,gBAAM,CAACc,gBAAP,CAAwB,SAAxB,EAAmC,MAAKD,aAAxC;AACH;;AApBS;AAqBb;;;;;;;;;;;wBAEQb,MAAM,CAACC,S;;;;;0BACF,KAAKc,WAAL,CAAiB,sDAAjB,C;;;AAEJJ,6B,GAAYX,MAAM,CAACC,SAAP,CAAiBe,M;AAC7BP,kC,GAAiBX,oBAAoB,E;AACrCY,0B,GAAS;AACXC,+BAAS,EAATA,SADW;AAEXF,oCAAc,EAAEE,SAAS,GAAGF,cAAH,GAAoB;AAFlC,qB;qDAIRC,M;;;;;;;;;;;;;;;;;;;MAjCiB,yD;;AAoChC,QAAMO,OAAO,GAAG,IAAIV,UAAJ,EAAhB,C,CAEA","file":"web-es5.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('online', this.handleOnline);\n            window.addEventListener('offline', this.handleOffline);\n        }\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n//# sourceMappingURL=web.js.map"]}